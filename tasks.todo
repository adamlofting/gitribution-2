
Testing:
 ☐ switch 'github' npm dependency back to the main repo once my PR is merged
 ☐ If a repo has records and we ping it again, we should also check for commits newer than what we have

Querying this data:
 ✔ Build in version that gets more recent data too @done (14-06-11 15:57)
 ✔ Get summary version working again @done (14-06-11 20:40)
 ✔ Check APIs still work @done (14-06-11 20:40)
 ☐ Summary fetch only needs to get the numbers up to current when iterating through the weekly dates
 ☐ Add a 'totals' view for beside the graph (can just use the current total for now)
 ☐ Move to mozilla org
 ☐ List of staff username/emails


＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿＿
Archive:
 ✔ Limit how far back this fetchs @done (14-06-11 15:32) @project(Querying this data)
 ✔ Turn gitribution into a scraper that formats info for Baloo. @done (14-06-11 15:26) @project(Querying this data)
 ✔ Match the Baloo Schema @done (14-06-11 15:19) @project(Querying this data)
 ✔ Separate out the summary and raw data fetches. @done (14-06-11 15:05) @project(Querying this data)
 ✔ Take caching off the query, and onto the lookup @done (14-06-10 09:23) @project(Querying this data)
 ✔ Periodically run the query, save the results to the DB for all teams, load this @done (14-06-10 09:23) @project(Querying this data)
 ✔ Load this instead @done (14-06-10 09:23) @project(Querying this data)
 ✔ List of unclaimed Repos @done (14-06-09 20:44) @project(Querying this data)
 ✔ Expose a list of teams via the tracking sheet (for drop-down on dashboard) @done (14-06-09 18:50) @project(Querying this data)
 ✔ Also show this on API error (valid teams or request your team is added) @done (14-06-09 18:50) @project(Querying this data)
 ✔ Query by moco/mofo by joining up the team repos @done (14-06-09 18:44) @project(Querying this data)
 ✔ Continue working on team specific queries in data.js @done (14-06-09 17:33) @project(Querying this data)
 ✔ Output new as well as active @done (14-06-09 15:18) @project(Querying this data)
 ✔ Output data in a format for demo @done (14-06-09 15:18) @project(Querying this data)
 ✔ Caching of queries @done (14-06-09 15:18) @project(Querying this data)
 ✔ Mapping repos to teams @done (14-06-09 14:38) @project(Querying this data)
 ✔ remove github_logic @done (14-06-09 07:37) @project(Testing)
 ✔ Test initially against https://github.com/mozilla-appmaker/ @done (14-06-05 14:41) @project(Testing)
 ✔ Load all repos within those orgs @done (14-06-05 14:41) @project(Testing)
 ✔ work on query by date functions @done (14-06-05 14:40) @project(Testing)
 ✔ Work from a list of org names @done (14-06-05 14:40) @project(Testing)
 ✔ Needs to keep track of how much has been loaded to start and stop @done (14-06-05 14:40) @project(Testing)
 ✔ Can't afford to reload whole repos @done (14-06-05 14:40) @project(Testing)
 ✔ Move all files into lib @done (14-06-03 21:25) @project(Testing)
 ✔ More grunt/jshint tidy up @done (14-06-03 21:25) @project(Testing)
 ✔ Tidy up existing lib files with jshint @done (14-06-03 20:34) @project(Testing)
 ✔ Setup grunt @done (14-06-03 20:33) @project(Testing)
 ✔ Update live DB @done (14-03-06 16:12) @project(Documentation)
 ✔ Setup a clear all and re-build option (move into a seperate node file to run locally) @done (14-03-06 16:12) @project(Priority)
 ✔ Link index to github documentation @done (14-03-06 16:12) @project(Other)
 ✔ Get latest scripts to generate the db table @done (14-03-06 16:12) @project(Documentation)
 ✔ All the config stuff @done (14-03-06 16:12) @project(Documentation)
 ✔ Query unique non-staff usernames 7 days @done (14-03-06 15:34) @project(Exposing the data)
 ✔ Query unique non-staff usernames 12 months @done (14-03-06 15:34) @project(Exposing the data)
 ✔ Output JSON @done (14-03-06 15:34) @project(Exposing the data)
 ✔ Cross check @done (14-03-06 15:34) @project(Exposing the data)
 ✔ API to query the data @done (14-03-06 15:34) @project(Exposing the data)
 ✔ Option to reset and rebuild the DB @done (14-03-06 08:22) @project(Management tools)
 ✔ Setup an update last few days option @done (14-03-06 08:20) @project(Priority)
 ✔ Work our timing so script doesn't end suddenly @done (14-03-05 10:29) @project(Priority)
 ✔ Storing members in a seperate table makes the query more complex than is worthwhile @done (14-03-05 09:49) @project(Priority)
 ✔ Simplify by saving the is_staff at time of writing @done (14-03-05 09:49) @project(Priority)
 ✔ Save issues contribution activity (continue in github_logic.js) @done (14-03-04 14:20) @project(Priority)
 ✔ Check github api client isn't messy across multiple threads (re nextpage) @done (14-03-03 16:41) @project(Priority)
 ✔ json config file to list repos to track @done (14-02-28 09:54) @project(Configuration)
 ✔ Look at existing modules for this @done (14-02-28 09:54) @project(Getting data from Github)
 ✔ Connect to the API @done (14-02-28 09:54) @project(Getting data from Github)
 ✔ Function to save a single item to the database @done (14-02-26 15:12)
 ✔ DB connection to be an ENV variable @done (14-02-26 11:18) @project(Configuration)
 ✔ github API key details as an environment variable (document how to do this) @done (14-02-25 21:03) @project(Configuration)
 ✔ Connect app to the database @done (14-02-25 21:03)
 ✔ Setup a table in the database @done (14-02-25 16:57)
